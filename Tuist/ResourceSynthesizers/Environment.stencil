// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if files %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
import Foundation
import SharedModel
// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length

// MARK: - JSON Files
{% macro typealiasIdentifier name productName suffix %}
{%if name != productName%}
/// {{suffix}} typealias 
typealias {{name|swiftIdentifier:"pretty"}}{{suffix}} = {{productName|swiftIdentifier:"pretty"}}{{suffix}}
{%endif%}
{% endmacro %}
{% macro fileBlock file %}
  {% call documentBlock file file.documents.first %}
{% endmacro %}
{% macro documentBlock file document %}
  {% set rootType %}{% call typeBlock document.metadata %}{% endset %}
  {% if document.metadata.type == "Array" %}
  {{accessModifier}} static let items: {{rootType}} = {% call valueBlock document.data document.metadata %}
  {% elif document.metadata.type == "Dictionary" %}
  {% for key,value in document.metadata.properties %}
  {{accessModifier}} {% call propertyBlock key value document.data %}
  {% endfor %}
  {% else %}
  {{accessModifier}} static let value: {{rootType}} = {% call valueBlock document.data document.metadata %}
  {% endif %}
{% endmacro %}
{% macro typeBlock metadata %}{% filter removeNewlines:"leading" %}
  {% if metadata.type == "Array" %}
    [{% call typeBlock metadata.element %}]
  {% elif metadata.type == "Dictionary" %}
    [String: Any]
  {% elif metadata.type == "Optional" %}
    Any?
  {% else %}
    {{metadata.type}}
  {% endif %}
{% endfilter %}{% endmacro %}
{% macro propertyBlock key metadata data %}{% filter removeNewlines:"leading" %}
  {% set propertyName %}{{key|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{% endset %}
  {% set propertyType %}{% call typeBlock metadata %}{% endset %}
  let {{propertyName}}: {{propertyType}} = {% call valueBlock data[key] metadata %}
{% endfilter %}{% endmacro %}
{% macro valueBlock value metadata %}
{% if metadata.type == "String" %}
 "{{ value }}"
{% elif metadata.type == "Optional" %}
 nil
{% elif metaValueItemType == "Bool" %}
{% if value %} true{% else %} false{% endif %}
{% elif metadata.type == "Array" and value %}
[{% for value in value %}
      {% call valueBlock value metadata.element.items[forloop.counter0]|default:metadata.element %}
      {{ ", " if not forloop.last }}
    {% endfor %}]
  {% elif metadata.type == "Dictionary" %}
    [{% for key,innerValue in value %}
      "{{key}}": {% call valueBlock innerValue metadata.properties[key] %}
      {{ ", " if not forloop.last }}
    {% endfor %}]
  {% else %}
    {{ value }}
  {% endif %}
{% endmacro %}
// swiftlint:disable identifier_name line_length number_separator type_body_length
  {% for file in files %}
    // File: {{file.name}}
     {% outer: for environment in file.documents.first.data.environments %}
      #if {{environment.name|uppercase}}
        {%call typealiasIdentifier file.documents.first.data.name environment.productName "FontFamily" %}
        {%call typealiasIdentifier file.documents.first.data.name environment.productName "Asset" %}
        {%call typealiasIdentifier file.documents.first.data.name environment.productName "Images" %}
        public struct EnvironmentImplementation: EnvironmentType {
            {% filter indent:2 %}
              {% for key,value in environment.constants %}
                {% filter removeNewlines:"leading" %}
                  {% set propertyName %}{{key}}{% endset %}
                  {% set metaValueItemType %}{{file.documents.first.metadata.properties["environments"].element.items[forloop.outer.counter0].properties["constants"].properties[key].type}}{% endset %}
                  {% set swiftMetaType%}{%if metaValueItemType == "Dictionary" %}[String: AnyCodable]{%else%}{{metaValueItemType}}{%endif%}{%endset%}
                    {{accessModifier}} let {{propertyName}}: {{swiftMetaType}} = {% call valueBlock value  file.documents.first.metadata.properties["environments"].element.items[forloop.outer.counter0].properties["constants"].properties[key] %}

                    {%endfilter%}

                  {% endfor %}
            {% endfilter %}
          }
          #endif
          {%endfor%}
  {% endfor %}

// swiftlint:enable identifier_name line_length number_separator type_body_length
{% else %}
// No files found
{% endif %}
